
#ifndef __IC3_SYSTEM_EVENT_SOURCE_H__
#define __IC3_SYSTEM_EVENT_SOURCE_H__

#include "EventCommon.h"
#include "SysObject.h"

namespace Ic3::System
{

	Ic3SysDeclareHandle( EventController );

	class IC3_SYSTEM_CLASS EventSource : public SysObject
	{
		friend class EventController;

	public:
		explicit EventSource( SysContextHandle pSysContext );
		virtual ~EventSource() noexcept;

		CPPX_ATTR_NO_DISCARD void * GetEventSourceNativeData() const;

		template <typename TPOutput>
		CPPX_ATTR_NO_DISCARD TPOutput * GetEventSourceNativeDataAs() const;

        CPPX_ATTR_NO_DISCARD EventController * GetEventController() const;

        CPPX_ATTR_NO_DISCARD EventController & GetEventControllerRef() const;

		CPPX_ATTR_NO_DISCARD bool IsPrimaryEventSource() const;

		CPPX_ATTR_NO_DISCARD bool IsLastEventSource() const;

	protected:
		virtual void OnDestroySystemObjectRequested() override;

		void SetEventController( EventControllerHandle pEventController );

		void SetEventSourceNativeData( void * pNativeData );

		void ResetEventSourceNativeData();

	private:
		// EventController which handles events generated by this source.
		// A single EventSource may be registered only in one controller at any given time.
		// NOTE: this is an active reference, so the controller is always accessible to a source object.
		EventControllerHandle _eventControllerActiveRef = nullptr;

		// Native data of this event source. This is actually a pointer to Platform::EventSourceNativeData,
		// but the whole Platform:: content is by default not visible in the public part of the library.
		// Actual event sources (Window, GLSurface, etc.) set this on construction.
		void * _eventSourceNativeData;
	};

	template <typename TPOutput>
	inline TPOutput * EventSource::GetEventSourceNativeDataAs() const
	{
		return static_cast<TPOutput *>( GetEventSourceNativeData() );
	}

} // namespace Ic3::System

#endif // __IC3_SYSTEM_EVENT_SOURCE_H__
